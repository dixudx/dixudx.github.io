<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Stephen's Blog]]></title>
  <subtitle><![CDATA[To me, the past is black and white, but the future is always colorful.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dixudx.github.io/"/>
  <updated>2015-10-10T13:58:40.000Z</updated>
  <id>http://dixudx.github.io/</id>
  
  <author>
    <name><![CDATA[Di Xu]]></name>
    <email><![CDATA[stephenhsu90@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Dynamically Show the Overall Progress of Running Jenkins Flows]]></title>
    <link href="http://dixudx.github.io/2015/09/28/Dynamically-Show-the-Overall-Progress-of-Running-Jenkins-Flows/"/>
    <id>http://dixudx.github.io/2015/09/28/Dynamically-Show-the-Overall-Progress-of-Running-Jenkins-Flows/</id>
    <published>2015-09-28T07:52:24.000Z</published>
    <updated>2015-10-10T13:58:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Prelude">Prelude</h2><p><img src="/images/jenkins_logo_title.jpg" alt=""></p>
<p>Everyone knows <a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a>, right? And I think nobody don’t love <a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a>. Maybe it’s not the fastest or the fanciest, but it’s really easy to start to use, even for rookies, due to its short learning curves. What’s more, it has a great ecosystem of <a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins" target="_blank" rel="external">plugins and add-ons</a>, which has significantly improved its capability. It is also optimized for easy customization. It can be configured to build codes, create <a href="http://www.docker.com/" target="_blank" rel="external">Docker containers</a>, run tons of tests, push to staging/production and etc. </p>
<p><a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a> has become an indispensable tool for <a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="external">Continuous Integration</a> (aka CI) and <a href="https://en.wikipedia.org/wiki/DevOps" target="_blank" rel="external">DevOps</a>. With the help of <a href="http://docs.openstack.org/infra/jenkins-job-builder/" target="_blank" rel="external">Jenkins-Job-Builder</a> (aka JJB), the configurations of Jenkins <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin" target="_blank" rel="external">Jobs/Flows</a> in JSON format can be maintained and updated through <a href="http://www.git-scm.com/" target="_blank" rel="external">Git</a>, which makes it easier to track every change on every Job/Flow.</p>
<p><span class="image-wrap" style=""><br><img src="/images/superhero-all.svg" style="border: 0px solid black"><br></span></p>
<p>However there are some issues regarding scaling and performance, which isn’t so unusual. <a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a> is built as a CI tool, which also needs CI for itself.</p>
<p>There are other cool solutions such as <a href="https://travis-ci.com/" target="_blank" rel="external">Travis CI</a> and <a href="https://circleci.com/" target="_blank" rel="external">Circle CI</a>, which are both hosted solutions that don’t require any maintenance on our side.</p>
<h2 id="Reflatus">Reflatus</h2><p>Ordinarily when a build flow is running, we want to track and dynamically show the <code>real-time status</code> of the Jenkins Build Flow. There is already a plugin named <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Graph+View+Plugin" target="_blank" rel="external">Build Graph View Plugin</a>, which computes a graph of related builds starting from the first job to the current one, and renders it as a graph.</p>
<p><img src="https://wiki.jenkins-ci.org/download/attachments/66847200/Capture+d%E2%80%99%C3%A9cran+2013-08-08+%C3%A0+18.54.39.png?version=1&amp;modificationDate=1375980909000" alt=""></p>
<p>However, that plugin is full-fledged with no standalone daemon, which is hard to customized and integrated into your own dashboard. What’s more, that plugin cannot fully display <strong>the whole flow graph</strong> until all the subjobs/pipelines finish. So it is quite hard for developers, testers and operations engineers to maintain/monitor the <strong>overall progress</strong> of the current flow.</p>
<p>So I write such a standalone web service named <a href="https://github.com/dixudx/reflatus" target="_blank" rel="external"><strong>reflatus</strong></a>, short for <strong>re</strong>al-time jenkins <strong>fl</strong>ow st<strong>atus</strong>.</p>
<p><img src="/images/reflatus_demo.png" alt="A Demo Flow"></p>
<p>On how to use and configure this tool, please refer to <a href="https://github.com/dixudx/reflatus" target="_blank" rel="external">the project wiki</a>.</p>
<h3 id="What_it_can_NOT_do">What it can NOT do</h3><p>Reflatus only has a <strong><em>static parser</em></strong>, which can <strong>NOT</strong> parse the dedicated DSL defined by <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin" target="_blank" rel="external">build flow</a>. For the reasons, please refer to FAQ.</p>
<p>Then an extra yaml file is needed to <strong><em>explicitly</em></strong> define the build workflows (aka build pipelines). More info can be seen in the <code>Configuration</code> section.</p>
<h2 id="FAQ">FAQ</h2><ul>
<li><p>Why not adding/using a parser to handle the dedicated DSL defined by <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin" target="_blank" rel="external">build flow</a> ?</p>
<p>  If so, there is no need to manually add an extra yaml file. Actually it will become quite complex to implement this feature. Regardless of the complicated build flow combinations, the name of a build job/pipeline can be dynamically acquired by <code>triggered parameters</code>, <code>environment variables</code> or an <code>explicit name</code>. This also applies to build job/pipeline parameters. These all adds more workloads and complexity to this tool. It is for this consideration that I discard this feature.</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Prelude">Prelude</h2><p><img src="/images/jenkins_logo_title.jpg" alt=""></p>
<p>Everyone knows <a href="http://jenkins-ci.org/" tar]]>
    </summary>
    
      <category term="DevOps" scheme="http://dixudx.github.io/tags/DevOps/"/>
    
      <category term="Jenkins" scheme="http://dixudx.github.io/tags/Jenkins/"/>
    
      <category term="ZeroMQ" scheme="http://dixudx.github.io/tags/ZeroMQ/"/>
    
      <category term="Projects" scheme="http://dixudx.github.io/categories/Projects/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Python-based Client for Rational Team Concert (RTC)]]></title>
    <link href="http://dixudx.github.io/2015/09/28/A-Python-based-Client-for-Rational-Team-Concert-RTC/"/>
    <id>http://dixudx.github.io/2015/09/28/A-Python-based-Client-for-Rational-Team-Concert-RTC/</id>
    <published>2015-09-28T06:50:51.000Z</published>
    <updated>2015-10-03T08:20:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Overture">Overture</h2><p>IBM® Rational Team Concert™, is built on the Jazz platform, allowing application development teams to use one tool to plan across teams, code, run standups, plan sprints, and track work. For more info, please refer to <a href="http://www.ibm.com/developerworks/downloads/r/rtc/" target="_blank" rel="external">the official website</a>.</p>
<p><img src="/images/IBM_Rational_Team_Concert.png" alt="IBM Rational Team Concert"></p>
<p>Currently there are no light-weighted, easy-used clients for <strong>Rational Team Concert</strong> (aka, <strong>RTC</strong>). Indeed there is an official RTC client, which is quite powerful, fully fledged and can be integrated with <strong>Eclipse</strong> as a plugin, but it is a GUI-based client. It is very hard to integrate with or be called by other programs. Also it is neither easy-installed nor light-weighted.</p>
<p>The most common scenario that I want to use such a client is to open a new <strong>RTC</strong> defect/change request/story when a <strong>Jenkins</strong> pipeline finishes.</p>
<p><img src="/images/rtc_web.gif" alt="IBM RTC Web"></p>
<p>I’ve searched all over the Internet, but found nothing. I think such a client should at least has below characteristics:</p>
<ul>
<li>easy to be installed;</li>
<li>light-weighted;</li>
<li>simple to use;</li>
<li>a command line tool without GUI;</li>
<li>at least supports some basic <strong>RTC</strong> usages, such as creating all kinds of <strong>Workitems</strong>, adding comments to the retrieved <strong>Workitems</strong> and etc;</li>
</ul>
<p>So I write such a Python-based client to implement these basic <strong>RTC</strong> scenarios.</p>
<h2 id="A_Python-based_Client:_RTCClient">A Python-based Client: RTCClient</h2><p>This client is named <a href="https://pypi.python.org/pypi/rtcclient" target="_blank" rel="external">rtcclient</a>, which has already been published to <a href="https://pypi.python.org/pypi" target="_blank" rel="external">Pypi</a>. You can install this client using <a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external"><code>pip</code></a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install rtcclient</span><br></pre></td></tr></table></figure>
<p>Actually <a href="https://pypi.python.org/pypi/rtcclient" target="_blank" rel="external">rtcclient</a> is more like a library, which provides some basic classes and methods to interact with RTC server:</p>
<ul>
<li>Retrieves objects which contain the detailed information/configuration, including <strong>Project Areas</strong>, <strong>Team Areas</strong>, <strong>Workitems</strong>, Saved <strong>Queries</strong>, etc;</li>
<li>Creates/Opens all kinds of <strong>Workitems</strong> through self-customized templates or Copies from some existing <strong>Workitems</strong>;</li>
<li>Performs some actions on the retrieved <strong>Workitems</strong>;</li>
<li>Queries <strong>Workitems</strong> using specified filtered rules or directly from your saved queries;</li>
<li>More features will be implemented in the future versions;</li>
</ul>
<p>However <strong>this is not an official-released Python-based RTC client</strong>. There may be some bugs in this client. You can report the bugs using the links in the below section.</p>
<p>Also you are welcomed to open a new ticket if new features should be incorporated in this client.</p>
<p>This is an active project that I will keep on updating and maintaining.</p>
<h3 id="Important_Links">Important Links</h3><ul>
<li><p><a href="https://github.com/dixudx/rtcclient/issues?q=is%3Aopen+sort%3Acomments-desc" target="_blank" rel="external">Support and Bug-Reports</a></p>
</li>
<li><p><a href="https://github.com/dixudx/rtcclient" target="_blank" rel="external">Project Source Code</a></p>
</li>
<li><p><a href="http://rtcclient.readthedocs.org" target="_blank" rel="external">Project Documentation</a></p>
</li>
</ul>
<h3 id="Supported_Python_&amp;_RTC_Versions">Supported Python &amp; RTC Versions</h3><p>RTC Versions:</p>
<ul>
<li>5.0.1</li>
<li>5.0.2</li>
</ul>
<p>Python Versions:</p>
<ul>
<li>2.6</li>
<li>2.7</li>
<li>3.3</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Overture">Overture</h2><p>IBM® Rational Team Concert™, is built on the Jazz platform, allowing application development teams to use ]]>
    </summary>
    
      <category term="Python" scheme="http://dixudx.github.io/tags/Python/"/>
    
      <category term="RTC" scheme="http://dixudx.github.io/tags/RTC/"/>
    
      <category term="pypi" scheme="http://dixudx.github.io/tags/pypi/"/>
    
      <category term="rtcclient" scheme="http://dixudx.github.io/tags/rtcclient/"/>
    
      <category term="Projects" scheme="http://dixudx.github.io/categories/Projects/"/>
    
  </entry>
  
</feed>
