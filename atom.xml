<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Stephen's Blog]]></title>
  <subtitle><![CDATA[To me, the past is black and white, but the future is always colorful.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dixudx.github.io/"/>
  <updated>2016-08-16T00:52:51.000Z</updated>
  <id>http://dixudx.github.io/</id>
  
  <author>
    <name><![CDATA[Di Xu]]></name>
    <email><![CDATA[stephenhsu90@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[How to Allow Remote Connections to Flask Web Service]]></title>
    <link href="http://dixudx.github.io/2015/10/26/How_to_Allow_Remote_Connections_to_Flask_Web_Service/"/>
    <id>http://dixudx.github.io/2015/10/26/How_to_Allow_Remote_Connections_to_Flask_Web_Service/</id>
    <published>2015-10-26T02:22:21.000Z</published>
    <updated>2016-08-16T00:52:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/flask.png" alt=""></p>
<p><code>Flask</code> is a pretty good web framework for <code>Python</code> based on <a href="http://werkzeug.pocoo.org/" target="_blank" rel="external">Werkzeug</a>, <a href="http://jinja.pocoo.org/" target="_blank" rel="external">Jinja 2</a> and good intentions. It is <strong>lightweight</strong>, which can help you easily and quickly set up a web application starting from scratch.</p>
<p>For how to build up a web service, please follow <a href="http://flask.pocoo.org/docs/0.10/quickstart/" target="_blank" rel="external">the quickstart guide</a>.</p>
<h2 id="Problem">Problem</h2><p>After successfully finishing your web service, you can run it with your Python interpreter. Make sure to not call your application <code>flask.py</code> because this would conflict with Flask itself.</p>
<p>For example, your service script is saved in file <code>hello.py</code>. Start the service with the following command.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python hello.py</span><br><span class="line"> * Running on http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/</span><br></pre></td></tr></table></figure>
<p>Now head over to <a href="http://127.0.0.1:5000/" target="_blank" rel="external">http://127.0.0.1:5000/</a>, and you should see your service.</p>
<p>You can accees the running service from the <code>localhost</code>. But you may cannot access this service from any other remote machines, such as <em>192.168.1.100</em>.</p>
<p><img src="/images/flask-app-unreachable.png" alt=""></p>
<h2 id="Solution">Solution</h2><p>There may be serveral reasons that cause this kind of error.</p>
<p>Please make sure that your HTTP service is listenning on <em>192.168.1.100:5000</em> or everywhere ( <em>0.0.0.0:5000</em> ) by checking the output of</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -tupln | grep <span class="string">':5000'</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">192.168</span>.<span class="number">1.100</span>:<span class="number">5000</span>          <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">5423</span>/python</span><br></pre></td></tr></table></figure>
<h3 id="If_not,_please_bind_the_host_to_an_address_other_than_localhost-">If not, please bind the host to an address other than <code>localhost</code>.</h3><p>Just as the doc said, </p>
<p>If you run the server you will notice that the server is only accessible from your own computer, not from any other in the network. This is the default because in <a href="http://flask.pocoo.org/docs/0.10/quickstart/#debug-mode" target="_blank" rel="external">debugging mode</a> a user of the application can execute arbitrary Python code on your computer.</p>
<p>If you have debug <strong>disabled</strong> or trust the users on your network, you can make the server publicly available simply by changing the call of the <code>run()</code> method to look like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># runs on its own IP address</span></span><br><span class="line">app.run(host=<span class="string">'192.168.1.100'</span>)</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This tells your operating system to listen on all public IPs.</span></span><br><span class="line">app.run(host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure>
<p>Remember to <strong>restart</strong> the service manually after each change to your code.</p>
<h3 id="If_it_is,_allow_the_traffic_using_iptables:">If it is, allow the traffic using <code>iptables</code>:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -I INPUT -p tcp --dport <span class="number">5000</span> -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2><ul>
<li><a href="http://flask.pocoo.org/docs" target="_blank" rel="external">Flask Official Documentation</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/flask.png" alt=""></p>
<p><code>Flask</code> is a pretty good web framework for <code>Python</code> based on <a href="h]]>
    </summary>
    
      <category term="Flask" scheme="http://dixudx.github.io/tags/Flask/"/>
    
      <category term="Python" scheme="http://dixudx.github.io/tags/Python/"/>
    
      <category term="Technical" scheme="http://dixudx.github.io/categories/Technical/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial on ZooKeeper – Part 4: Use Ansible to Setup ZooKeeper Servers]]></title>
    <link href="http://dixudx.github.io/2015/10/22/Tutorial-on-ZooKeeper-Part-4-Use-Ansible-to-Setup-ZooKeeper-Servers/"/>
    <id>http://dixudx.github.io/2015/10/22/Tutorial-on-ZooKeeper-Part-4-Use-Ansible-to-Setup-ZooKeeper-Servers/</id>
    <published>2015-10-22T13:19:43.000Z</published>
    <updated>2016-08-16T00:52:51.000Z</updated>
    <content type="html"><![CDATA[<p>From the <a href="/2015/10/17/Tutorial-on-ZooKeeper-Part-3-Setup-ZooKeeper-Cluster/">last tutorial</a>, we know how to install and configure a <code>ZooKeeper cluster</code> starting from scratch.</p>
<p><img src="/images/zookeeper_cartoon.jpg" alt=""></p>
<p>In order to simplify the deployment, I’ve written a <a href="https://github.com/dixudx/ansible-zookeeper" target="_blank" rel="external">ansible-zookeeper role</a>, which is originally forked from <a href="https://github.com/AnsibleShipyard/ansible-zookeeper" target="_blank" rel="external">AnsibleShipyard</a> and modified to support both <strong>standalone mode</strong> and <strong>replicated mode</strong> (also known as <code>cluster</code>), to deploy <code>ZooKeeper</code> servers.</p>
<blockquote>
<p>Note: This role requires <code>Java</code> support. You can install manually or use role <a href="https://github.com/AnsibleShipyard/ansible-java" target="_blank" rel="external">ansible-java</a> as a dependency. This role assumes that all your to-be-deployed servers have been already installed these <a href="https://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html#sc_systemReq" target="_blank" rel="external">required softwares</a>. </p>
</blockquote>
<h2 id="Clone_the_Role">Clone the Role</h2><p>Before the deployment, you have to first clone the role to your ansible playbooks folder (just for better management), of course you can specify to other folders.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /your/ansible/playbooks/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dixudx/ansible-zookeeper.git</span><br></pre></td></tr></table></figure>
<h2 id="Prepare_your_own_inventory">Prepare your own inventory</h2><p>Just as <a href="/2015/10/17/Tutorial-on-ZooKeeper-Part-3-Setup-ZooKeeper-Cluster/#ZooKeeper_Deployment_Topology">last tutorial said</a>, you have to be clear enough about your <code>ZooKeeper</code> servers. Touch your <a href="http://docs.ansible.com/ansible/intro_inventory.html" target="_blank" rel="external">inventory file</a> to store these servers. In order to differentiate these two modes for better demonstration, I create two sections, one is <strong>zookeeper_servers</strong> for <code>standalone mode</code>, the other is <strong>cluster_hosts</strong> for <code>replicated mode</code>. You can also give them other names. Take your choice.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim myinventory</span><br></pre></td></tr></table></figure>
<h2 id="Start_the_Deployment">Start the Deployment</h2><p>The <strong>default</strong> mode of <a href="https://github.com/dixudx/ansible-zookeeper" target="_blank" rel="external">this role</a> is <code>standalone</code>, which means you can omit below parts in your yaml file.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vars:&#10;  install_mode: &#34;standalone&#34;</span><br></pre></td></tr></table></figure>
<h3 id="Standalone_Mode">Standalone Mode</h3><p>Once you have your own inventory file, you can create a blow playbook named <strong>zookeeper_standalone.yml</strong> and insert below contents.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- hosts: zookeeper_servers&#10;  vars:&#10;    install_mode: &#34;standalone&#34;&#10;  sudo: yes&#10;&#10;  roles:&#10;    - &#123;role: ansible-zookeeper&#125;</span><br></pre></td></tr></table></figure>
<p>If the servers have not been installed <code>Java</code>, you can append below part to the above playbook.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencies:&#10;  - &#123; role: ansible-java, java_version: 7 &#125;</span><br></pre></td></tr></table></figure>
<p>Now you can start deploying standalone <code>ZooKeeper</code> servers.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i myinventory zookeeper_standalone.yml</span><br></pre></td></tr></table></figure>
<h3 id="Replicated_Mode">Replicated Mode</h3><p>Just as standalone mode, create a playbook named <strong>zookeeper_cluster.yml</strong> and insert below contents.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- hosts: cluster_hosts&#10;  vars:&#10;    install_mode: &#34;cluster&#34;&#10;  sudo: yes&#10;&#10;  roles:&#10;    - &#123;role: ansible-zookeeper&#125;</span><br></pre></td></tr></table></figure>
<p>Also you can add <a href="https://github.com/AnsibleShipyard/ansible-java" target="_blank" rel="external">ansible-java</a> as a dependency.</p>
<p>Run below command to deploy <code>ZooKeeper</code> cluster.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook - i myinventory zookeeper_cluster.yml</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>From the <a href="/2015/10/17/Tutorial-on-ZooKeeper-Part-3-Setup-ZooKeeper-Cluster/">last tutorial</a>, we know how to install and config]]>
    </summary>
    
      <category term="Ansible" scheme="http://dixudx.github.io/tags/Ansible/"/>
    
      <category term="Role" scheme="http://dixudx.github.io/tags/Role/"/>
    
      <category term="ZooKeeper" scheme="http://dixudx.github.io/tags/ZooKeeper/"/>
    
      <category term="Tutorial" scheme="http://dixudx.github.io/categories/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial on ZooKeeper – Part 3: Setup ZooKeeper Cluster]]></title>
    <link href="http://dixudx.github.io/2015/10/17/Tutorial-on-ZooKeeper-Part-3-Setup-ZooKeeper-Cluster/"/>
    <id>http://dixudx.github.io/2015/10/17/Tutorial-on-ZooKeeper-Part-3-Setup-ZooKeeper-Cluster/</id>
    <published>2015-10-17T02:32:18.000Z</published>
    <updated>2016-08-16T00:58:53.000Z</updated>
    <content type="html"><![CDATA[<p>In <a href="/2015/10/16/Tutorial-on-ZooKeeper-Part-2-Installation-and-Configuration/">last tutorial</a>, how to install and configure <code>ZooKeeper</code> in <strong>standalone mode</strong> and <strong>replicated mode</strong> is introduced. Now I will give you an explicit example on how to setup this <strong>replicated mode</strong> ( also known as <code>ZooKeeper Cluster</code> ) starting from scratch.</p>
<p><img src="/images/zookeeper-1-638.jpg" alt=""></p>
<h2 id="Pre-requisites">Pre-requisites</h2><p>Before the deployment, please see <a href="https://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html#sc_systemReq" target="_blank" rel="external">System Requirements</a> in the Admin guide to install some required software especially <code>Java</code>.</p>
<h2 id="ZooKeeper_Deployment_Topology">ZooKeeper Deployment Topology</h2><p>Few things we have to be clear enough before we start the deployment of <code>ZooKeeper</code>.</p>
<ol>
<li><p>The number of <code>ZooKeeper</code> servers that you want to form your <code>ZooKeeper Cluster</code>.</p>
<p> From the <a href="/2015/10/14/Tutorial-on-ZooKeeper-Part-1-Concepts-and-Terminologies/">first tutorial</a>, we know that <strong>odd</strong> number of machines are best for a cluster. In my example, I use 5 servers to form the cluster with tolerance of <a href="/2015/10/14/Tutorial-on-ZooKeeper-Part-1-Concepts-and-Terminologies/#Ensemble_and_Quorum">2 failures</a>.</p>
</li>
<li><p>About the boxes/physical machines that you want to deploy on.</p>
<p> Of course, you can install all your <code>ZooKeeper</code> servers on a single box. But for better <strong>high availability</strong> (aka <strong>HA</strong>), you should not put all the <code>ZooKeeper</code> servers into one sinlge basket, because two is better than one and more is better than less.</p>
<blockquote>
<p>To achieve the highest probability of tolerating a <strong>failure</strong> you should try to make machine failures <strong>independent</strong>. For example, if most of the machines share the same <strong>switch</strong>, failure of that switch could cause a correlated failure and bring down the service. The same holds true of <strong>shared power circuits</strong>, <strong>cooling systems</strong>, etc.</p>
</blockquote>
<p> In my example, I deploy the cluster on 2 boxes with ip <code>192.168.0.100</code> and <code>192.168.0.101</code>.</p>
</li>
<li><p>Ports on every server, including client port (default 2181), quorum port (default 2888) and leader election port (default 3888).</p>
<p> In order to deploy several servers on a single box, all the three ports here have to be modified accordingly.</p>
<p> Below is my configuration, which will be configured in <code>zoo.cfg</code> on every server.</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|  Server ID    | Client Port | Quorum Port | Leader Election Port |</span><br><span class="line">| <span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span> |     <span class="number">2181</span>    |    <span class="number">2888</span>     |         <span class="number">3888</span>         |</span><br><span class="line">| <span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span> |     <span class="number">2182</span>    |    <span class="number">2889</span>     |         <span class="number">3889</span>         |</span><br><span class="line">| <span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span> |     <span class="number">2183</span>    |    <span class="number">2890</span>     |         <span class="number">3890</span>         |</span><br><span class="line">| <span class="number">192.168</span><span class="number">.0</span><span class="number">.101</span> |     <span class="number">2181</span>    |    <span class="number">2888</span>     |         <span class="number">3888</span>         |</span><br><span class="line">| <span class="number">192.168</span><span class="number">.0</span><span class="number">.101</span> |     <span class="number">2181</span>    |    <span class="number">2889</span>     |         <span class="number">3889</span>         |</span><br></pre></td></tr></table></figure>
</li>
<li><p>Where to put data (attribute <code>dataDir</code> in <code>zoo.cfg</code>) for <code>ZooKeeper</code> Server?</p>
<p> <code>dataDir</code> is the location where <code>ZooKeeper</code> will store the <strong>in-memory database snapshots</strong>(<em>persistent</em> copies of the <code>znodes</code>) and, unless specified otherwise, the transaction log of updates to the database.</p>
<p> As changes are made to the <code>znodes</code>, these changes are appended to a transaction log, occasionally. When a log grows large, a snapshot of the current state of all <code>znodes</code> will be written to the filesystem.  This snapshot supercedes all previous logs.</p>
<p> In my exmpale, I use <code>/var/lib/zookeeper/zookeeper-[id]/data</code> as data home.</p>
</li>
<li><p>Any performance improvement settings?</p>
<p> Just as the <a href="https://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html#Single+Machine+Requirements" target="_blank" rel="external">admin guide</a> said,</p>
<blockquote>
<p>If <code>ZooKeeper</code> has to contend with other applications for access to resourses like <em>storage media</em>, <em>CPU</em>, <em>network</em>, or <em>memory</em>, its performance will suffer markedly. <code>ZooKeeper</code> has <strong>strong durability guarantees</strong>, which means it uses storage media to <strong>log changes</strong> before the operation responsible for the change is allowed to complete. You should be aware of this dependency then, and take great care if you want to ensure that <code>ZooKeeper</code> operations aren’t held up by your media. Here are some things you can do to minimize that sort of degradation:</p>
<ul>
<li><p><code>ZooKeeper</code>‘s transaction log must be on a <strong>dedicated</strong> device. (A dedicated partition is not enough.) <code>ZooKeeper</code> writes the log sequentially, without seeking Sharing your log device with other processes can cause seeks and contention, which in turn can cause multi-second delays. For this setting, please refer to attribute <code>dataLogDir</code> (which allows a <strong>dedicated</strong> log device to be used, and helps <strong>avoid competition between logging and snaphots</strong>) in <code>zoo.cfg</code>. You can find more <a href="https://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html#sc_advancedConfiguration" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Do not put <code>ZooKeeper</code> in a situation that can cause a <strong>swap</strong>. In order for <code>ZooKeeper</code> to function with any sort of timeliness, it simply <strong>cannot be allowed to swap</strong>. Therefore, make certain that the maximum <strong>heap size</strong> given to ZooKeeper is not bigger than the amount of real memory available to ZooKeeper. For more on this, see <a href="https://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html#sc_commonProblems" target="_blank" rel="external">Things to Avoid</a>.</p>
</li>
</ul>
</blockquote>
<p> Having a <strong>dedicated</strong> log device has a large impact on <strong>throughput and stable latencies</strong>. It is highly recommened to dedicate a log device and set <code>dataLogDir</code> to point to a directory on that device, and then make sure to point <code>dataDir</code> to a directory not residing on that device.</p>
</li>
</ol>
<h2 id="ZooKeeper_Cluster_(Multi-Server)_Setup">ZooKeeper Cluster (Multi-Server) Setup</h2><p>Let’s begin installation and configuration of <code>ZooKeeper</code>.</p>
<h3 id="Step_1:_Create_Directory_Structure">Step 1: Create Directory Structure</h3><ul>
<li><p>on host <em>192.168.0.100</em></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ mkdir -p /var/lib/zookeeper/zookeeper-<span class="number">1</span> /var/lib/zookeeper/zookeeper-<span class="number">2</span> /var/lib/zookeeper/zookeeper-<span class="number">3</span></span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ mkdir -p /var/lib/zookeeper/zookeeper-<span class="number">1</span>/data /var/lib/zookeeper/zookeeper-<span class="number">2</span>/data /var/lib/zookeeper/zookeeper-<span class="number">3</span>/data</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ mkdir -p /var/lib/zookeeper/zookeeper-<span class="number">1</span>/<span class="built_in">log</span> /var/lib/zookeeper/zookeeper-<span class="number">2</span>/<span class="built_in">log</span> /var/lib/zookeeper/zookeeper-<span class="number">3</span>/<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>on host <em>192.168.0.101</em></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:~$ mkdir -p /var/lib/zookeeper/zookeeper-<span class="number">4</span> /var/lib/zookeeper/zookeeper-<span class="number">5</span></span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:~$ mkdir -p /var/lib/zookeeper/zookeeper-<span class="number">4</span>/data /var/lib/zookeeper/zookeeper-<span class="number">5</span>/data</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:~$ mkdir -p /var/lib/zookeeper/zookeeper-<span class="number">4</span>/<span class="built_in">log</span> /var/lib/zookeeper/zookeeper-<span class="number">5</span>/<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Let’s take a look above created directory structure</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ tree /var/lib/zookeeper</span><br><span class="line"></span><br><span class="line">/var/lib/zookeeper</span><br><span class="line">├── zookeeper-<span class="number">1</span></span><br><span class="line">│   └── data</span><br><span class="line">│   └── <span class="built_in">log</span></span><br><span class="line">└── zookeeper-<span class="number">2</span></span><br><span class="line">│   └── data</span><br><span class="line">│   └── <span class="built_in">log</span></span><br><span class="line">└── zookeeper-<span class="number">3</span></span><br><span class="line">│   └── data</span><br><span class="line">│   └── <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:~$ tree /var/lib/zookeeper</span><br><span class="line"></span><br><span class="line">/var/lib/zookeeper</span><br><span class="line">├── zookeeper-<span class="number">4</span></span><br><span class="line">│   └── data</span><br><span class="line">│   └── <span class="built_in">log</span></span><br><span class="line">└── zookeeper-<span class="number">5</span></span><br><span class="line">│   └── data</span><br><span class="line">│   └── <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Step_2:_Creating_file_myid_(a_ZooKeeper_Server_ID)">Step 2: Creating file <code>myid</code> (a ZooKeeper Server ID)</h3><p>Basically this file <code>myid</code> reside in the <code>ZooKeeper</code> data directory.</p>
<ul>
<li><p>on host <em>192.168.0.100</em></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ <span class="built_in">echo</span> <span class="number">1</span> &gt; /var/lib/zookeeper/zookeeper-<span class="number">1</span>/data/myid</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ <span class="built_in">echo</span> <span class="number">2</span> &gt; /var/lib/zookeeper/zookeeper-<span class="number">2</span>/data/myid</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ <span class="built_in">echo</span> <span class="number">3</span> &gt; /var/lib/zookeeper/zookeeper-<span class="number">3</span>/data/myid</span><br></pre></td></tr></table></figure>
</li>
<li><p>on host <em>192.168.0.101</em></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:~$ <span class="built_in">echo</span> <span class="number">4</span> &gt; /var/lib/zookeeper/zookeeper-<span class="number">4</span>/data/myid</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:~$ <span class="built_in">echo</span> <span class="number">5</span> &gt; /var/lib/zookeeper/zookeeper-<span class="number">5</span>/data/myid</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Step_3:_Downloading_Stable_ZooKeeper_Release_and_Copying_Files">Step 3: Downloading <a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="external">Stable ZooKeeper Release</a> and Copying Files</h3><p>I use the version 3.4.6 of <code>ZooKeeper</code> as an example.</p>
<ul>
<li><p>on host <em>192.168.0.100</em></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ <span class="built_in">cd</span> /opt</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:/opt$ wget http://apache.arvixe.com/zookeeper/stable/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:/opt$ tar -zxf zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:/opt$ cp ./zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/* /var/lib/zookeeper/zookeeper-<span class="number">1</span>/</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:/opt$ cp ./zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/* /var/lib/zookeeper/zookeeper-<span class="number">2</span>/</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:/opt$ cp ./zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/* /var/lib/zookeeper/zookeeper-<span class="number">3</span>/</span><br></pre></td></tr></table></figure>
</li>
<li><p>on host <em>192.168.0.101</em></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:~$ <span class="built_in">cd</span> /opt</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:/opt$ wget http://apache.arvixe.com/zookeeper/stable/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:/opt$ tar -zxf zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:/opt$ cp ./zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/* /var/lib/zookeeper/zookeeper-<span class="number">4</span>/</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:/opt$ cp ./zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/* /var/lib/zookeeper/zookeeper-<span class="number">5</span>/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Step_4:_Configure_Every_ZooKeeper_Sever">Step 4: Configure Every ZooKeeper Sever</h3><p>The configuration file <code>zoo.cfg</code> locates at <code>/var/lib/zookeeper/[zookeeper-id]/conf/zoo.cfg</code>.</p>
<p>Here I will show you how to configure <code>ZooKeeper</code> server1, which also works for other 4 servers.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ cp /var/lib/zookeeper/zookeeper-<span class="number">1</span>/conf/zoo_sample.cfg /var/lib/zookeeper/zookeeper-<span class="number">1</span>/conf/zoo.cfg</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:~$ vim /var/lib/zookeeper/zookeeper-<span class="number">1</span>/conf/zoo.cfg</span><br></pre></td></tr></table></figure>
<p>You will see below configuration and take some modifications (including <em>clientPort</em>, <em>dataDir</em> and <em>dataLogDir</em>). For the last five servers’ setting, please refer to <a href="/2015/10/16/Tutorial-on-ZooKeeper-Part-2-Installation-and-Configuration/#Replicated_Mode">replicated mode in tutorial 2</a> for more explanation and the ports settings in <a href="/2015/10/17/Tutorial-on-ZooKeeper-Part-3-Setup-ZooKeeper-Cluster/#ZooKeeper_Deployment_Topology">#3 of ZooKeeper Deployment Topology</a>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line"># The number of ticks that the initial synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"></span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"></span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># Choose appropriately for your environment</span><br><span class="line">dataDir=/var/lib/zookeeper/zookeeper-1/data/</span><br><span class="line"></span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line"># the directory where transaction log is stored.</span><br><span class="line"># this parameter provides dedicated log device for ZooKeeper</span><br><span class="line">dataLogDir=/var/lib/zookeeper/zookeeper-1/log/</span><br><span class="line"></span><br><span class="line"># ZooKeeper server and its port no.</span><br><span class="line"># ZooKeeper ensemble should know about every other machine in the ensemble</span><br><span class="line"># specify server id by creating 'myid' file in the dataDir</span><br><span class="line"># use hostname instead of IP address for convenient maintenance</span><br><span class="line">server.1=192.168.0.100:2888:3888</span><br><span class="line">server.2=192.168.0.100:2889:3889</span><br><span class="line">server.3=192.168.0.100:2890:3890</span><br><span class="line">server.4=192.168.0.101:2888:3888</span><br><span class="line">server.5=192.168.0.101:2889:3889</span><br></pre></td></tr></table></figure>
<p>Next please perform same steps with appropriate values (including <em>clientPort</em>, <em>dataDir</em>, <em>dataLogDir</em>) for the rest 4 ZooKeeper servers.</p>
<h3 id="Step_5:_Configuration_ZooKeeper_Logger_for_deployment-">Step 5: Configuration ZooKeeper Logger for deployment.</h3><p>Following are the default values of <code>log4j.properties</code> and it holds dev nature in it; update it as per your environment and need.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zookeeper.root.logger=INFO, CONSOLE</span><br><span class="line">zookeeper.console.threshold=INFO</span><br><span class="line">zookeeper.log.dir=.</span><br><span class="line">zookeeper.log.file=zookeeper.log</span><br><span class="line">zookeeper.log.threshold=DEBUG</span><br><span class="line">zookeeper.tracelog.dir=.</span><br><span class="line">zookeeper.tracelog.file=zookeeper_trace.log</span><br></pre></td></tr></table></figure>
<h3 id="Step_6:_Start_the_ZooKeeper_Cluster">Step 6: Start the ZooKeeper Cluster</h3><p>Once the <code>zoo.cfg</code> file created for all the 5 servers,  we can start the <code>ZooKeeper Cluster</code> by starting every <code>ZooKeeper</code> server.</p>
<p>First let’s start the server1</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:/opt$ <span class="built_in">cd</span> /var/lib/zookeeper/zookeeper-<span class="number">1</span>/</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:zookeeper-<span class="number">1</span>$ ./bin/zkServer.sh start</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /var/lib/zookeeper/zookeeper-<span class="number">1</span>/conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>
<p>Now, go ahead and start the remaining 4 <code>ZooKeeper</code> servers. Tail the <code>zookeeper.out</code> file in the bin directory to see more information.</p>
<p>After all these 5 servers start, we use <code>status</code> to see/check every ZooKeeper Server status:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:zookeeper-<span class="number">1</span>$ ./bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /var/lib/zookeeper/zookeeper-<span class="number">1</span>/conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:zookeeper-<span class="number">1</span>$ <span class="built_in">cd</span> ../zookeeper-<span class="number">2</span></span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:zookeeper-<span class="number">2</span>$ ./bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /var/lib/zookeeper/zookeeper-<span class="number">2</span>/conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:zookeeper-<span class="number">2</span>$ <span class="built_in">cd</span> ../zookeeper-<span class="number">3</span></span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">100</span>:zookeeper-<span class="number">3</span>$ ./bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /var/lib/zookeeper/zookeeper-<span class="number">3</span>/conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:zookeeper-<span class="number">4</span>$ ./bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /var/lib/zookeeper/zookeeper-<span class="number">4</span>/conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:zookeeper-<span class="number">4</span>$ <span class="built_in">cd</span> ../zookeeper-<span class="number">5</span></span><br><span class="line">ip-<span class="number">192</span>-<span class="number">168</span>-<span class="number">0</span>-<span class="number">101</span>:zookeeper-<span class="number">5</span>$ ./bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /var/lib/zookeeper/zookeeper-<span class="number">5</span>/conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2><ul>
<li><a href="http://zookeeper.apache.org/" target="_blank" rel="external">Apache ZooKeeper - Official Site</a></li>
<li><a href="http://myjeeva.com/zookeeper-cluster-setup.html" target="_blank" rel="external">ZooKeeper Cluster (Multi-Server) Setup</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>In <a href="/2015/10/16/Tutorial-on-ZooKeeper-Part-2-Installation-and-Configuration/">last tutorial</a>, how to install and configure <co]]>
    </summary>
    
      <category term="High Availability" scheme="http://dixudx.github.io/tags/High-Availability/"/>
    
      <category term="ZooKeeper" scheme="http://dixudx.github.io/tags/ZooKeeper/"/>
    
      <category term="Tutorial" scheme="http://dixudx.github.io/categories/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial on ZooKeeper – Part 2: Installation and Configuration]]></title>
    <link href="http://dixudx.github.io/2015/10/16/Tutorial-on-ZooKeeper-Part-2-Installation-and-Configuration/"/>
    <id>http://dixudx.github.io/2015/10/16/Tutorial-on-ZooKeeper-Part-2-Installation-and-Configuration/</id>
    <published>2015-10-16T05:37:58.000Z</published>
    <updated>2016-08-16T00:52:51.000Z</updated>
    <content type="html"><![CDATA[<p>In <a href="/2015/10/14/Tutorial-on-ZooKeeper-Part-1-Concepts-and-Terminologies/">last tutorial</a>, some concepts and terminologies are introduced. To further investigate and use <code>ZooKeeper</code>, we move to the next step - install and configure <code>ZooKeeper</code>. </p>
<p><img src="/images/zoo_keeper1.png" alt=""></p>
<h2 id="Installation">Installation</h2><p><code>ZooKeeper</code> is very simple to install.</p>
<h3 id="Pre-requisites">Pre-requisites</h3><p>See <a href="https://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html#sc_systemReq" target="_blank" rel="external">System Requirements</a> in the Admin guide.</p>
<h3 id="Download_the_Source_Code_and_Install">Download the Source Code and Install</h3><p>To get a <code>ZooKeeper</code> distribution, download a recent <a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="external">stable</a> release from one of the Apache Download Mirrors.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ wget http://apache.arvixe.com/zookeeper/stable/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">$ tar -zxvf zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz</span><br></pre></td></tr></table></figure>
<p>For <strong>Ubuntu</strong>, you can also install <code>ZooKeeper</code> using directly debian packages.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ apt-<span class="operator"><span class="keyword">cache</span> <span class="keyword">search</span> zookeeper</span><br><span class="line">libzookeeper-<span class="keyword">java</span> - Core <span class="keyword">Java</span> libraries <span class="keyword">for</span> zookeeper</span><br><span class="line">libzookeeper-<span class="keyword">java</span>-doc - API Documentation <span class="keyword">for</span> zookeeper</span><br><span class="line">libzookeeper-mt-dev - Development files <span class="keyword">for</span> multi threaded zookeeper <span class="keyword">C</span> bindings</span><br><span class="line">libzookeeper-mt2 - Multi threaded <span class="keyword">C</span> bindings <span class="keyword">for</span> zookeeper</span><br><span class="line">libzookeeper-st-dev - Development files <span class="keyword">for</span> single threaded zookeeper <span class="keyword">C</span> bindings</span><br><span class="line">libzookeeper-st2 - Single threaded <span class="keyword">C</span> bindings <span class="keyword">for</span> zookeeper</span><br><span class="line">libzookeeper2 - <span class="keyword">C</span> bindings <span class="keyword">for</span> zookeeper - transitional <span class="keyword">package</span></span><br><span class="line">monsterz - arcade puzzle game</span><br><span class="line">monsterz-<span class="keyword">data</span> - graphics <span class="keyword">and</span> audio <span class="keyword">data</span> <span class="keyword">for</span> monsterz</span><br><span class="line">python-kazoo - higher <span class="keyword">level</span> API <span class="keyword">to</span> Apache Zookeeper <span class="keyword">for</span> Python clients</span><br><span class="line">python-kazoo-doc - API <span class="keyword">to</span> Apache Zookeeper <span class="keyword">for</span> Python clients. - API documentation</span><br><span class="line">python-txzookeeper - Twisted-based <span class="keyword">Asynchronous</span> Libraries <span class="keyword">for</span> Apache Zookeeper.</span><br><span class="line">python-zookeeper - Python bindings <span class="keyword">for</span> zookeeper</span><br><span class="line">zookeeper - <span class="keyword">High</span>-<span class="keyword">performance</span> coordination service <span class="keyword">for</span> <span class="keyword">distributed</span> applications</span><br><span class="line">zookeeper-<span class="keyword">bin</span> - Command line utilities <span class="keyword">for</span> zookeeper</span><br><span class="line">zookeeperd - Init control scripts <span class="keyword">for</span> zookeeper</span><br><span class="line">$ apt-<span class="keyword">get</span> <span class="keyword">install</span> -y zookeeper zookeeper-<span class="keyword">bin</span> zookeeperd</span></span><br></pre></td></tr></table></figure>
<h2 id="Configuration">Configuration</h2><p>In <code>ZooKeeper</code>, there are two types of modes. One is the <strong>standalone mode</strong>, the other is the <strong>replicated mode</strong>.</p>
<h3 id="Standalone_Mode">Standalone Mode</h3><p>Setting up a <code>ZooKeeper</code> server in <strong>standalone mode</strong> is straightforward. The server is contained in a single JAR file, so installation consists of creating a configuration.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/conf</span><br><span class="line">$ ls</span><br><span class="line">configuration.xsl  <span class="built_in">log</span>4j.properties  zoo_sample.cfg</span><br><span class="line"><span class="comment"># To start ZooKeeper you need a configuration file. copy it from ./zoo_sample.cfg</span></span><br><span class="line">$ cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>
<p>Then open the file <code>zoo.cfg</code>, you will see</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line"><span class="setting">tickTime=<span class="value"><span class="number">2000</span></span></span></span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="setting">initLimit=<span class="value"><span class="number">10</span></span></span></span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="setting">syncLimit=<span class="value"><span class="number">5</span></span></span></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"><span class="setting">dataDir=<span class="value">/tmp/zookeeper</span></span></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="setting">clientPort=<span class="value"><span class="number">2181</span></span></span></span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br></pre></td></tr></table></figure>
<p>Change the value of <code>dataDir</code> to specify an existing (empty to start with) directory.</p>
<p>For <strong>standalone mode</strong>, only the below three fields are needed and meaningful:</p>
<ul>
<li>tickTime</li>
<li>dataDir</li>
<li>clientPort</li>
</ul>
<p>Now that you created the configuration file, you can start <code>ZooKeeper</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/opt/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/conf</span><br><span class="line">$ ../bin/zkServer.sh start</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">$ ../bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/bin/../conf/zoo.cfg</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure>
<h3 id="Replicated_Mode">Replicated Mode</h3><p>Running <code>ZooKeeper</code> in <strong>standalone mode</strong> is convenient for evaluation, some development, and testing.</p>
<p>You can find the meanings of these and other configuration settings in the section Configuration Parameters. A word though about a few here:</p>
<p>Every machine that is part of the ZooKeeper ensemble should know about every other machine in the ensemble. You accomplish this with the series of lines of the form <code>server.id=host:port:port</code>. The parameters host and port are straightforward. You attribute the server id to each machine by creating a file named <strong>myid</strong>, <em>one for each server</em>, which <em>resides in that server’s data directory</em>, as specified by the configuration file parameter dataDir.</p>
<p>But <strong>in production</strong>, you should run <code>ZooKeeper</code> in <strong>replicated mode</strong>. A <strong>replicated</strong> group of servers in the same application is called a <code>quorum</code>, and in <strong>replicated mode</strong>, all servers in the <code>quorum</code> have copies of the same configuration file. The file is similar to the one used in <strong>standalone mode</strong>, but with a few differences. Here is an example:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=zoo1:2888:3888</span><br><span class="line">server.2=zoo2:2888:3888</span><br><span class="line">server.3=zoo3:2888:3888</span><br></pre></td></tr></table></figure>
<p>For the meanings of the new entries, <code>initLimit</code> and <code>syncLimit</code>, please refer to the comments in the file <code>zoo.cfg</code> of <a href="./#Standalone_Mode">Standalone Mode</a>.</p>
<p>The entries of the form <code>server.X</code> list the servers that make up the <code>ZooKeeper</code> service. When the server starts up, it knows which server it is by looking for the file <strong>myid</strong> in the data directory. This file, which I will show its usage in the <a href="/2015/10/15/Tutorial-on-ZooKeeper-Part-3-Multi-Server-Setup/">next tutorial</a>, is quite <strong>IMPORTANT and INDISPENSABLE</strong>. That file contains the <strong>server number</strong>, which is a cluster-unique <code>ZooKeeper</code>‘s instance id (1-255) in <em>ASCII</em>, and it should match <code>X</code> in <code>server.X</code> in the left hand side of this setting.</p>
<p>The list of servers that make up <code>ZooKeeper</code> servers that is used by the clients must match the list of <code>ZooKeeper</code> servers that each <code>ZooKeeper</code> server has.</p>
<p>Finally, note the two port numbers after each server name: <strong>2888</strong> and <strong>3888</strong>. Peers use the former port to connect to other peers. Such a connection is necessary so that peers can communicate, for example, to agree upon the order of updates. More specifically, a <code>ZooKeeper</code> server uses this port to connect followers to the <strong>leader</strong>. When a new <strong>leader</strong> arises, a <strong>follower</strong> opens a TCP connection to the <strong>leader</strong> using this port. Because the default <strong>leader election</strong> also uses TCP, we currently require another port for <strong>leader election</strong>. This is the second port in the server entry.</p>
<p>In the <a href="/2015/10/17/Tutorial-on-ZooKeeper-Part-3-Setup-ZooKeeper-Cluster/">next tutorial</a>, I will give an explicit example on how to setup this <strong>replicated mode</strong>/a cluster of <code>ZooKeeper</code> server ( also known as an <code>ensemble</code> ) starting from scratch.</p>
<h2 id="Reference">Reference</h2><ul>
<li><a href="http://zookeeper.apache.org/" target="_blank" rel="external">Apache ZooKeeper - Official Site</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>In <a href="/2015/10/14/Tutorial-on-ZooKeeper-Part-1-Concepts-and-Terminologies/">last tutorial</a>, some concepts and terminologies are ]]>
    </summary>
    
      <category term="ZooKeeper" scheme="http://dixudx.github.io/tags/ZooKeeper/"/>
    
      <category term="Tutorial" scheme="http://dixudx.github.io/categories/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial on ZooKeeper – Part 1: Concepts and Terminologies]]></title>
    <link href="http://dixudx.github.io/2015/10/14/Tutorial-on-ZooKeeper-Part-1-Concepts-and-Terminologies/"/>
    <id>http://dixudx.github.io/2015/10/14/Tutorial-on-ZooKeeper-Part-1-Concepts-and-Terminologies/</id>
    <published>2015-10-14T12:25:21.000Z</published>
    <updated>2016-08-16T00:52:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p><img src="/images/bigdata-zookeeper.png" alt=""></p>
<p>Apache <code>ZooKeeper</code> is a <strong>highly reliable</strong> <em>distributed coordination service</em> for distributed applications to coordinate with each other through a shared hierarchical name space, which is organized similarly to a standard file system path. The name space consists of data registers - called <code>znodes</code>, in <code>ZooKeeper</code> parlance - and these are similar to files and directories which can provide strictly ordered access to the <code>znodes</code>. Unlike a typical file system, which is designed for storage, <code>ZooKeeper</code> data is kept <strong>in-memory</strong>, which means <code>ZooKeeper</code> can achieve <strong>high throughput</strong> and <strong>low latency numbers</strong>. It is especially fast in “read-dominant” workloads. <code>ZooKeeper</code> applications run on thousands of machines, and it performs best where <strong>reads</strong> are more common than <strong>writes</strong>, at ratios of around <strong>10:1</strong>.</p>
<p><code>ZooKeeper</code> is <strong>ordered</strong>. <code>ZooKeeper</code> stamps each update with a number that reflects the order of all <code>ZooKeeper</code> transactions. Subsequent operations can use the order to implement higher-level abstractions, such as <strong>synchronization primitives</strong>.</p>
<p>The <strong>performance</strong> aspects of <code>ZooKeeper</code> allow it to be used in <strong>large distributed systems</strong>. The <strong>reliability</strong> aspects prevent it from becoming the single point of failure in <strong>big systems</strong>. Its <strong>strict ordering</strong> allows <strong>sophisticated synchronization primitives</strong> to be implemented at the client.</p>
<p>From this part on, I will write a series of <a href="/tags/ZooKeeper/">tutorials on ZooKeeper</a>. Some concepts and terminologies are introduced here first.</p>
<h2 id="What_is_ZooKeeper?">What is ZooKeeper?</h2><p>As the <a href="http://zookeeper.apache.org/" target="_blank" rel="external">Official Site</a> said,</p>
<blockquote>
<p>ZooKeeper is a centralized service for <strong>maintaining configuration information</strong>, <strong>naming</strong>, <strong>providing distributed synchronization</strong>, and <strong>providing group services</strong>. All of these kinds of services are used in some form or another by distributed applications. Each time they are implemented there is a lot of work that goes into fixing the bugs and race conditions that are inevitable. Because of the difficulty of implementing these kinds of services, applications initially usually skimp on them ,which make them brittle in the presence of change and difficult to manage. Even when done correctly, different implementations of these services lead to <strong>management complexity</strong> when the applications are deployed.</p>
</blockquote>
<p><code>ZooKeeper</code> runs in <strong>Java</strong> and has <em>bindings</em> for both <strong>Java</strong> and <strong>C</strong>.</p>
<p><code>ZooKeeper</code> is very fast and very simple, which is designed to be a basis for the construction of more <strong>complicated services</strong>, such as synchronization, it provides a set of guarantees. These are:</p>
<ul>
<li><strong>Sequential Consistency</strong> - Updates from a client will be applied in the order that they were sent.</li>
<li><strong>Atomicity</strong> - Updates either succeed or fail. No partial results.</li>
<li><strong>Single System Image</strong> - A client will see the same view of the service regardless of the server that it connects to.</li>
<li><strong>Reliability</strong> - Once an update has been applied, it will persist from that time forward until a client overwrites the update.</li>
<li><strong>Timeliness</strong> - The clients view of the system is guaranteed to be up-to-date within a certain time bound.</li>
</ul>
<p>Learn more about <code>ZooKeeper</code> on the <a href="http://zookeeper.apache.org/" target="_blank" rel="external">ZooKeeper Official Site</a>.</p>
<h2 id="Some_Concepts_and_Terminology">Some Concepts and Terminology</h2><h3 id="Data_model_and_the_hierarchical_namespace">Data model and the hierarchical namespace</h3><p>Just as mentioned in the <a href="./#Overview">Overview</a>, the name space provided by <code>ZooKeeper</code> is much like that of a standard file system. A name is a sequence of path elements separated by a <strong>slash</strong> (“/“). Every node in ZooKeeper’s name space is identified by a path, which always needs to start with the <strong>root znode</strong> ( “/“ ).</p>
<p><img src="/images/zknamespace.jpg" alt="ZooKeeper&#39;s Hierarchical Namespace"></p>
<h3 id="Znode">Znode</h3><p>Unlike standard file systems, each node in a <code>ZooKeeper</code> namespace can have <strong>data</strong> associated with it as well as children. You can create some sub-znodes/children znodes in the <code>znode</code>. It is like having a file-system that allows a file to also be a directory. (<code>ZooKeeper</code> was designed to store <strong>coordination data</strong>: <em>status information</em>, <em>configuration</em>, <em>location information</em>, etc., so the data stored at each node is usually small, in the byte to kilobyte range.) We use the term <code>znode</code> to make it clear that we are talking about <code>ZooKeeper</code> data nodes.</p>
<blockquote>
<p>Note: Every <code>znode</code> must has a parent whose path is a prefix of the <code>znode</code> with one less element; the exception to this rule is <strong>root znode</strong> (“/“) which has no parent. Also, exactly like standard file systems, a znode cannot be deleted if it has any children.</p>
</blockquote>
<p><code>Znodes</code> maintain a stat structure that includes <strong>version numbers</strong> for data changes, <strong>acl changes</strong>. The stat structure also has <strong>timestamps</strong>. The <strong>version number</strong>, together with the <strong>timestamp</strong> allow <code>ZooKeeper</code> to validate the cache and to coordinate updates. Each time a <code>znode</code>‘s data changes, <strong>the version number increases</strong>. For instance, whenever a client retrieves data, it also receives the version of the data. And when a client performs an update or a delete, it must supply the version of the data of the <code>znode</code> it is changing. If the version it supplies doesn’t match the actual version of the data, the update will fail.</p>
<p>The command syntax for creating a <code>znode</code> is as follows:</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -<span class="string">[options]</span> /<span class="string">[znode-name]</span> <span class="string">[znode-data]</span></span><br></pre></td></tr></table></figure>
<h4 id="Example_1:_Create_a_new_znode_named_“znode_test”_with_data_“znode_test_data”">Example 1: Create a new znode named “znode_test” with data “znode_test_data”</h4><p>The path consists of the <strong>root znode</strong> (“/“) and the name of the <code>znode</code> you want to create. Here you can write <code>/znode_test</code> for its path.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">0</span>] ls /</span><br><span class="line">[zookeeper]</span><br><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">1</span>] create /znode_test znode_test_data</span><br><span class="line">Created /znode_test</span><br><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">2</span>] get /newznode</span><br><span class="line">znode_test_data</span><br><span class="line">cZxid = <span class="number">0x200000002</span></span><br><span class="line">ctime = Wed Oct <span class="number">14</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">00</span> EDT <span class="number">2015</span></span><br><span class="line">mZxid = <span class="number">0x200000002</span></span><br><span class="line">mtime = Wed Oct <span class="number">14</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">00</span> EDT <span class="number">2015</span></span><br><span class="line">pZxid = <span class="number">0x200000009</span></span><br><span class="line">cversion = <span class="number">1</span></span><br><span class="line">dataVersion = <span class="number">0</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0x0</span></span><br><span class="line">dataLength = <span class="number">6</span></span><br><span class="line">numChildren = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>The command about operations on the <code>znode</code>s, including creating, getting, deleting and etc, will be introduced in the following tutorials.</p>
<h4 id="Example_2:_Create_a_recursive_znode_named_“znode_rtest3”_with_data_“znode_rtest_data”">Example 2: Create a recursive znode named “znode_rtest3” with data “znode_rtest_data”</h4><p>Only one important thing you have to keep it in mind, when you create a new recursive <code>znode</code>, the znodes/paths along have to be already created. Otherwise, exceptions will be thrown.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>(CONNECTED) <span class="number">3</span>] ls /</span><br><span class="line">[zookeeper, znode_test]</span><br><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>(CONNECTED) <span class="number">4</span>] create <span class="regexp">/znode_rtest1/</span>znode_rtest2/znode_rtest3 znode_rtest_data3</span><br><span class="line">Node does not <span class="string">exist:</span> <span class="regexp">/znode_rtest1/</span>znode_rtest2/znode_rtest3</span><br><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>(CONNECTED) <span class="number">5</span>] create /znode_rtest1 znode_rtest_data1</span><br><span class="line">Created /znode_rtest1</span><br><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>(CONNECTED) <span class="number">6</span>] create <span class="regexp">/znode_rtest1/</span>znode_rtest2/znode_rtest3 znode_rtest_data3</span><br><span class="line">Node does not <span class="string">exist:</span> <span class="regexp">/znode_rtest1/</span>znode_rtest2/znode_rtest3</span><br><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>(CONNECTED) <span class="number">7</span>] create <span class="regexp">/znode_rtest1/</span>znode_rtest2 znode_rtest_data2</span><br><span class="line">Created <span class="regexp">/znode_rtest1/</span>znode_rtest2</span><br><span class="line">[<span class="string">zk:</span> <span class="string">localhost:</span><span class="number">2181</span>(CONNECTED) <span class="number">8</span>] create <span class="regexp">/znode_rtest1/</span>znode_rtest2/znode_rtest3 znode_rtest_data3</span><br><span class="line">Created <span class="regexp">/znode_rtest1/</span>znode_rtest2/znode_rtest3</span><br></pre></td></tr></table></figure>
<h4 id="Different_Types_of_Znodes">Different Types of Znodes</h4><p>In <code>ZooKeeper</code> there are 3 types of znodes: <strong>persistent</strong>, <strong>ephemeral</strong>, and <strong>sequential</strong>.</p>
<ol>
<li><p>Persistent Znodes (Default)</p>
<p> These are the <strong>default</strong> znodes in <code>ZooKeeper</code>. They will stay in the <code>ZooKeeper</code> server <strong>permanently</strong>, as long as any other clients (including the creator) leave it alone.</p>
 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">create</span> /znode mydata</span><br></pre></td></tr></table></figure>
</li>
<li><p>Ephemeral Znodes</p>
<p> <strong>Ephemeral znodes</strong> (also referred as <strong>session znodes</strong>) are <strong>temporary</strong> znodes. Unlike the <strong>persistent znodes</strong>, they are <strong>destroyed</strong> as soon as the creator client logs out of the <code>ZooKeeper</code> server. For example, let’s say <em>client1</em> created <em>eznode1</em>. Once <em>client1</em> logs out of the <code>ZooKeeper</code> server, the <code>eznode1</code> gets destroyed.</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">create</span> –<span class="keyword">e</span> /eznode mydata</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Sequential Znodes</p>
<p> <strong>Sequential znode</strong> is given a <strong>10-digit number</strong> in a <strong>numerical order</strong> at the end of its name. Let’s say <em>client1</em> created a <em>sznode1</em>. In the <code>ZooKeeper</code> server, the <em>sznode1</em> will be named like this:</p>
<blockquote>
<p>sznode0000000001</p>
</blockquote>
<p> If <em>client1</em> creates another <strong>sequential znode</strong>, it would bear the <strong>next number</strong> in a sequence. So the next <strong>sequential znode</strong> will be called <em>[znode-name]0000000002</em>.</p>
 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">create</span> –s /sznode mydata</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="ACL">ACL</h3><p>ACL (Access Control List) is basically an authentication mechanism implemented in <code>ZooKeeper</code>. It makes <code>znodes</code> accessible to users, depending on how it is set. This part will be introduced in the following tutorials.</p>
<h3 id="Ensemble_and_Quorum">Ensemble and Quorum</h3><p><code>ZooKeeper</code> service can be replicated over a sets of hosts called an <code>ensemble</code>. As long as a <strong>majority</strong> of the <code>ensemble</code> are up, the service will be available. For the <code>ZooKeeper</code> service to be active, there must be a <code>majority</code> of <strong>non-failing</strong> machines that can communicate with each other. <strong>Failure</strong> in this context means a machine crash, or some error in the network that partitions a server off from the <strong>majority</strong>. To create a deployment that can tolerate the <strong>failure</strong> of <em>F</em> machines, you should count on deploying <em>2xF+1</em> machines. Thus, a deployment that consists of three machines can handle one <strong>failure</strong>, and a deployment of five machines can handle two <strong>failures</strong>. Note that a deployment of six machines can only handle two <strong>failures</strong> since three machines is not a <strong>majority</strong>. For this reason, <code>ZooKeeper</code> deployments are usually made up of an <strong>odd number of machines</strong>. <strong>Three</strong> <code>ZooKeeper</code> servers is the <strong>minimum recommended size</strong> for an <code>ensemble</code>, and we also recommend that they run on separate machines.</p>
<p>A replicated group of servers in the same application is called a <code>quorum</code>. All servers in the <code>quorum</code> have copies of the <strong>same configuration</strong> file. <code>QuorumPeers</code> will form a <code>ZooKeeper ensemble</code>. A <code>quorum</code> is represented by a <strong>strict majority</strong> of nodes. You can have one node in your <code>ensemble</code>, but it won’t be a <em>highly available</em> or <em>reliable</em> system. If you have two nodes in your <code>ensemble</code>, you would need both to be up to keep the service running because one out of two nodes is not a <strong>strict majority</strong>. If you have three nodes in the <code>ensemble</code>, one can go down, and you would still have a functioning service (two out of three is a <strong>strict majority</strong>). </p>
<p>If a <code>quorum</code> of nodes are not available in an <code>ensemble</code>, the <code>ZooKeeper</code> service is nonfunctional.</p>
<h2 id="Reference">Reference</h2><ul>
<li><a href="http://zookeeper.apache.org/" target="_blank" rel="external">Apache ZooKeeper - Official Site</a></li>
<li><a href="http://myjeeva.com/zookeeper-cluster-setup.html" target="_blank" rel="external">ZooKeeper Cluster (Multi-Server) Setup</a></li>
<li><a href="https://ihong5.wordpress.com/2014/06/24/znode-types-and-how-to-create-read-delete-and-write-in-zookeeper-via-zkclient/" target="_blank" rel="external">ZNode Types and How to Create, Read, Delete, and Write in ZooKeeper</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Overview">Overview</h2><p><img src="/images/bigdata-zookeeper.png" alt=""></p>
<p>Apache <code>ZooKeeper</code> is a <strong>highly ]]>
    </summary>
    
      <category term="Apache" scheme="http://dixudx.github.io/tags/Apache/"/>
    
      <category term="ZooKeeper" scheme="http://dixudx.github.io/tags/ZooKeeper/"/>
    
      <category term="Tutorial" scheme="http://dixudx.github.io/categories/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dynamically Show the Overall Progress of Running Jenkins Flows]]></title>
    <link href="http://dixudx.github.io/2015/09/28/Dynamically-Show-the-Overall-Progress-of-Running-Jenkins-Flows/"/>
    <id>http://dixudx.github.io/2015/09/28/Dynamically-Show-the-Overall-Progress-of-Running-Jenkins-Flows/</id>
    <published>2015-09-28T07:52:24.000Z</published>
    <updated>2016-08-16T00:52:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Prelude">Prelude</h2><p><img src="/images/jenkins_logo_title.jpg" alt=""></p>
<p>Everyone knows <a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a>, right? And I think nobody don’t love <a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a>. Maybe it’s not the fastest or the fanciest, but it’s really easy to start to use, even for rookies, due to its short learning curves. What’s more, it has a great ecosystem of <a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins" target="_blank" rel="external">plugins and add-ons</a>, which has significantly improved its capability. It is also optimized for easy customization. It can be configured to build codes, create <a href="http://www.docker.com/" target="_blank" rel="external">Docker containers</a>, run tons of tests, push to staging/production and etc. </p>
<p><a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a> has become an indispensable tool for <a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="external">Continuous Integration</a> (aka CI) and <a href="https://en.wikipedia.org/wiki/DevOps" target="_blank" rel="external">DevOps</a>. With the help of <a href="http://docs.openstack.org/infra/jenkins-job-builder/" target="_blank" rel="external">Jenkins-Job-Builder</a> (aka JJB), the configurations of Jenkins <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin" target="_blank" rel="external">Jobs/Flows</a> in JSON format can be maintained and updated through <a href="http://www.git-scm.com/" target="_blank" rel="external">Git</a>, which makes it easier to track every change on every Job/Flow.</p>
<p><span class="image-wrap" style=""><br><img src="/images/superhero-all.svg" style="border: 0px solid black"><br></span></p>
<p>However there are some issues regarding scaling and performance, which isn’t so unusual. <a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a> is built as a CI tool, which also needs CI for itself.</p>
<p>There are other cool solutions such as <a href="https://travis-ci.com/" target="_blank" rel="external">Travis CI</a> and <a href="https://circleci.com/" target="_blank" rel="external">Circle CI</a>, which are both hosted solutions that don’t require any maintenance on our side.</p>
<h2 id="Reflatus">Reflatus</h2><p>Ordinarily when a build flow is running, we want to track and dynamically show the <code>real-time status</code> of the Jenkins Build Flow. There is already a plugin named <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Graph+View+Plugin" target="_blank" rel="external">Build Graph View Plugin</a>, which computes a graph of related builds starting from the first job to the current one, and renders it as a graph.</p>
<p><img src="https://wiki.jenkins-ci.org/download/attachments/66847200/Capture+d%E2%80%99%C3%A9cran+2013-08-08+%C3%A0+18.54.39.png?version=1&amp;modificationDate=1375980909000" alt=""></p>
<p>However, that plugin is full-fledged with no standalone daemon, which is hard to customized and integrated into your own dashboard. What’s more, that plugin cannot fully display <strong>the whole flow graph</strong> until all the subjobs/pipelines finish. So it is quite hard for developers, testers and operations engineers to maintain/monitor the <strong>overall progress</strong> of the current flow.</p>
<p>So I write such a standalone web service named <a href="https://github.com/dixudx/reflatus" target="_blank" rel="external"><strong>reflatus</strong></a>, short for <strong>re</strong>al-time jenkins <strong>fl</strong>ow st<strong>atus</strong>.</p>
<p><img src="/images/reflatus_demo.png" alt="A Demo Flow"></p>
<p>On how to use and configure this tool, please refer to <a href="https://github.com/dixudx/reflatus" target="_blank" rel="external">the project wiki</a>.</p>
<h3 id="What_it_can_NOT_do">What it can NOT do</h3><p>Reflatus only has a <strong><em>static parser</em></strong>, which can <strong>NOT</strong> parse the dedicated DSL defined by <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin" target="_blank" rel="external">build flow</a>. For the reasons, please refer to FAQ.</p>
<p>Then an extra yaml file is needed to <strong><em>explicitly</em></strong> define the build workflows (aka build pipelines). More info can be seen in the <code>Configuration</code> section.</p>
<h2 id="FAQ">FAQ</h2><ul>
<li><p>Why not adding/using a parser to handle the dedicated DSL defined by <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin" target="_blank" rel="external">build flow</a> ?</p>
<p>  If so, there is no need to manually add an extra yaml file. Actually it will become quite complex to implement this feature. Regardless of the complicated build flow combinations, the name of a build job/pipeline can be dynamically acquired by <code>triggered parameters</code>, <code>environment variables</code> or an <code>explicit name</code>. This also applies to build job/pipeline parameters. These all adds more workloads and complexity to this tool. It is for this consideration that I discard this feature.</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Prelude">Prelude</h2><p><img src="/images/jenkins_logo_title.jpg" alt=""></p>
<p>Everyone knows <a href="http://jenkins-ci.org/" tar]]>
    </summary>
    
      <category term="DevOps" scheme="http://dixudx.github.io/tags/DevOps/"/>
    
      <category term="Jenkins" scheme="http://dixudx.github.io/tags/Jenkins/"/>
    
      <category term="ZeroMQ" scheme="http://dixudx.github.io/tags/ZeroMQ/"/>
    
      <category term="Projects" scheme="http://dixudx.github.io/categories/Projects/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Python-based Client for Rational Team Concert (RTC)]]></title>
    <link href="http://dixudx.github.io/2015/09/28/A-Python-based-Client-for-Rational-Team-Concert-RTC/"/>
    <id>http://dixudx.github.io/2015/09/28/A-Python-based-Client-for-Rational-Team-Concert-RTC/</id>
    <published>2015-09-28T06:50:51.000Z</published>
    <updated>2016-08-16T00:52:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Overture">Overture</h2><p>IBM® Rational Team Concert™, is built on the Jazz platform, allowing application development teams to use one tool to plan across teams, code, run standups, plan sprints, and track work. For more info, please refer to <a href="http://www.ibm.com/developerworks/downloads/r/rtc/" target="_blank" rel="external">the official website</a>.</p>
<p><img src="/images/IBM_Rational_Team_Concert.png" alt="IBM Rational Team Concert"></p>
<p>Currently there are no light-weighted, easy-used clients for <strong>Rational Team Concert</strong> (aka, <strong>RTC</strong>). Indeed there is an official RTC client, which is quite powerful, fully fledged and can be integrated with <strong>Eclipse</strong> as a plugin, but it is a GUI-based client. It is very hard to integrate with or be called by other programs. Also it is neither easy-installed nor light-weighted.</p>
<p>The most common scenario that I want to use such a client is to open a new <strong>RTC</strong> defect/change request/story when a <strong>Jenkins</strong> pipeline finishes.</p>
<p><img src="/images/rtc_web.gif" alt="IBM RTC Web"></p>
<p>I’ve searched all over the Internet, but found nothing. I think such a client should at least has below characteristics:</p>
<ul>
<li>easy to be installed;</li>
<li>light-weighted;</li>
<li>simple to use;</li>
<li>a command line tool without GUI;</li>
<li>at least supports some basic <strong>RTC</strong> usages, such as creating all kinds of <strong>Workitems</strong>, adding comments to the retrieved <strong>Workitems</strong> and etc;</li>
</ul>
<p>So I write such a Python-based client to implement these basic <strong>RTC</strong> scenarios.</p>
<h2 id="A_Python-based_Client:_RTCClient">A Python-based Client: RTCClient</h2><p>This client is named <a href="https://pypi.python.org/pypi/rtcclient" target="_blank" rel="external">rtcclient</a>, which has already been published to <a href="https://pypi.python.org/pypi" target="_blank" rel="external">Pypi</a>. You can install this client using <a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external"><code>pip</code></a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install rtcclient</span><br></pre></td></tr></table></figure>
<p>Actually <a href="https://pypi.python.org/pypi/rtcclient" target="_blank" rel="external">rtcclient</a> is more like a library, which provides some basic classes and methods to interact with RTC server:</p>
<ul>
<li>Retrieves objects which contain the detailed information/configuration, including <strong>Project Areas</strong>, <strong>Team Areas</strong>, <strong>Workitems</strong>, Saved <strong>Queries</strong>, etc;</li>
<li>Creates/Opens all kinds of <strong>Workitems</strong> through self-customized templates or Copies from some existing <strong>Workitems</strong>;</li>
<li>Performs some actions on the retrieved <strong>Workitems</strong>;</li>
<li>Queries <strong>Workitems</strong> using specified filtered rules or directly from your saved queries;</li>
<li>More features will be implemented in the future versions;</li>
</ul>
<p>However <strong>this is not an official-released Python-based RTC client</strong>. There may be some bugs in this client. You can report the bugs using the links in the below section.</p>
<p>Also you are welcomed to open a new ticket if new features should be incorporated in this client.</p>
<p>This is an active project that I will keep on updating and maintaining.</p>
<h3 id="Important_Links">Important Links</h3><ul>
<li><p><a href="https://github.com/dixudx/rtcclient/issues?q=is%3Aopen+sort%3Acomments-desc" target="_blank" rel="external">Support and Bug-Reports</a></p>
</li>
<li><p><a href="https://github.com/dixudx/rtcclient" target="_blank" rel="external">Project Source Code</a></p>
</li>
<li><p><a href="http://rtcclient.readthedocs.org" target="_blank" rel="external">Project Documentation</a></p>
</li>
</ul>
<h3 id="Supported_Python_&amp;_RTC_Versions">Supported Python &amp; RTC Versions</h3><p>RTC Versions:</p>
<ul>
<li>5.0.1</li>
<li>5.0.2</li>
</ul>
<p>Python Versions:</p>
<ul>
<li>2.6</li>
<li>2.7</li>
<li>3.3</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Overture">Overture</h2><p>IBM® Rational Team Concert™, is built on the Jazz platform, allowing application development teams to use ]]>
    </summary>
    
      <category term="Python" scheme="http://dixudx.github.io/tags/Python/"/>
    
      <category term="RTC" scheme="http://dixudx.github.io/tags/RTC/"/>
    
      <category term="pypi" scheme="http://dixudx.github.io/tags/pypi/"/>
    
      <category term="rtcclient" scheme="http://dixudx.github.io/tags/rtcclient/"/>
    
      <category term="Projects" scheme="http://dixudx.github.io/categories/Projects/"/>
    
  </entry>
  
</feed>
